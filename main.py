import os
import requests
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, filters
from dotenv import load_dotenv

# Logging рд╕реЗрдЯрдЕрдк рдХрд░реЗрдВ рддрд╛рдХрд┐ рд╣рдо рдХрдВрд╕реЛрд▓ рдореЗрдВ errors рджреЗрдЦ рд╕рдХреЗрдВ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# .env рдлрд╝рд╛рдЗрд▓ рд▓реЛрдб рдХрд░реЗрдВ
load_dotenv()

# --- CONFIGURATION ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL", "https://freeapi.frappeash.workers.dev/")
ADMIN_ID = int(os.getenv("ADMIN_ID")) # Admin ID рдХреЛ рдпрд╣рд╛рдБ рд╕реЗ рд▓реЗрдВрдЧреЗ (рдЗрд╕реЗ .env рдореЗрдВ рд╕реЗрдЯ рдХрд░реЗрдВ!)
DAILY_CREDITS_LIMIT = 3
REFERRAL_CREDITS = 3
# ---------------------

# рдбреЗрдЯрд╛рдмреЗрд╕: рдмрдбрд╝реЗ рд╕реНрдХреЗрд▓ рдХреЗ рд▓рд┐рдП, рдЗрд╕рдХреА рдЬрдЧрд╣ Redis/PostgreSQL рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ!
USER_CREDITS = {} 
USERS = set() # рд╕рднреА рдпреВрдирд┐рдХ рдпреВрдЬрд░реНрд╕ рдХреЛ рд╕реНрдЯреЛрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП

def get_credits(user_id: int) -> int:
    """рдпреВрдЬрд░ рдХреЗ рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░рддрд╛ рд╣реИ, рдЕрдЧрд░ рдкрд╣рд▓реА рдмрд╛рд░ рд╣реИ рддреЛ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рджреЗрддрд╛ рд╣реИред"""
    # рдЕрдЧрд░ рдпреВрдЬрд░ рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИ, рдпрд╛ рдХреНрд░реЗрдбрд┐рдЯ 0 рд╣реИ (рджреИрдирд┐рдХ рд░реАрд╕реЗрдЯ рдХреЗ рд▓рд┐рдП рд╕рд░рд▓ рд▓реЙрдЬрд┐рдХ)
    if user_id not in USER_CREDITS or USER_CREDITS.get(user_id, 0) == 0:
        USER_CREDITS[user_id] = DAILY_CREDITS_LIMIT
    
    return USER_CREDITS.get(user_id, DAILY_CREDITS_LIMIT)

def get_referral_link(bot_username: str, user_id: int) -> str:
    """рдпреВрдЬрд░ рдХреЗ рд▓рд┐рдП рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ рдмрдирд╛рддрд╛ рд╣реИред"""
    return f"https://t.me/{bot_username}?start=ref_{user_id}"

# рдирдпрд╛ рдлрд╝рдВрдХреНрд╢рди: рд╣рд░ рдЗрдВрдЯрд░реЗрдХреНрд╢рди рдкрд░ рдпреВрдЬрд░ рдХреЛ рд╕реЗрд╡ рдХрд░реЗрдВ
def save_user(user_id: int) -> None:
    """рдпреВрдЬрд░ ID рдХреЛ USERS рд╕реЗрдЯ рдореЗрдВ рдЬреЛрдбрд╝рддрд╛ рд╣реИред"""
    USERS.add(user_id)
    # рдЖрдк рдпрд╣рд╛рдБ рдЗрд╕ рд╕реЗрдЯ рдХреЛ рдХрд┐рд╕реА рдлрд╝рд╛рдЗрд▓ рдпрд╛ рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рд╕реЗрд╡ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рддрд╛рдХрд┐ рдмреЙрдЯ рд░реАрд╕реНрдЯрд╛рд░реНрдЯ рд╣реЛрдиреЗ рдкрд░ рдбреЗрдЯрд╛ рди рдЦреЛрдПред

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start рдХрдорд╛рдВрдб рдкрд░ рдЬрд╡рд╛рдм рджреЗрддрд╛ рд╣реИ, рд░реЗрдлрд░рд▓ рд╣реИрдВрдбрд▓рд┐рдВрдЧ рд╕рд╣рд┐рддред"""
    user_id = update.effective_user.id
    username = update.effective_user.first_name or "friend"
    
    save_user(user_id) # рдпреВрдЬрд░ рдХреЛ рд╕реЗрд╡ рдХрд░реЗрдВ

    # 1. рд░реЗрдлрд░рд▓ рд▓реЙрдЬрд┐рдХ рд╣реИрдВрдбрд▓ рдХрд░реЗрдВ (рдкрд╣рд▓реЗ рдЬреИрд╕рд╛)
    if context.args and context.args[0].startswith('ref_'):
        try:
            referrer_id = int(context.args[0].split('_')[1])
            
            if referrer_id != user_id and user_id not in context.user_data.get('referred_by', []):
                # рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рд░реЗрдлрд░рд░ рдХреЛ рдХреЗрд╡рд▓ рдПрдХ рдмрд╛рд░ рдХреНрд░реЗрдбрд┐рдЯ рдорд┐рд▓реЗ (context.user_data рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ)
                context.user_data['referred_by'] = [referrer_id]
                
                current_credits = get_credits(referrer_id)
                USER_CREDITS[referrer_id] = current_credits + REFERRAL_CREDITS
                
                await context.bot.send_message(
                    chat_id=referrer_id,
                    text=f"ЁЯе│ **рдмрдзрд╛рдИ рд╣реЛ!** `{username}` рдиреЗ рдЖрдкрдХреЗ рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ рд╕реЗ рдмреЙрдЯ рд╢реБрд░реВ рдХрд┐рдпрд╛ рд╣реИред\n"
                         f"рдЖрдкрдХреЛ {REFERRAL_CREDITS} рдЕрддрд┐рд░рд┐рдХреНрдд рдХреНрд░реЗрдбрд┐рдЯ рдорд┐рд▓реЗ рд╣реИрдВред рдЖрдкрдХреЗ рдХреБрд▓ рдХреНрд░реЗрдбрд┐рдЯ: {USER_CREDITS[referrer_id]}",
                    parse_mode='Markdown'
                )
                await update.message.reply_text(f"рдзрдиреНрдпрд╡рд╛рдж! рдЖрдкрдиреЗ рд░реЗрдлрд░рд▓ рдХреЗ рдЬрд╝рд░рд┐рдП рдмреЙрдЯ рд╢реБрд░реВ рдХрд┐рдпрд╛ рд╣реИред рдЖрдкрдХреЛ {DAILY_CREDITS_LIMIT} рдХреНрд░реЗрдбрд┐рдЯ рдорд┐рд▓реЗ рд╣реИрдВред")
            elif referrer_id == user_id:
                 await update.message.reply_text("рдЖрдк рдЦреБрдж рдХреЛ рд░реЗрдлрд░ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ, рджреЛрд╕реНрдд!")

        except Exception as e:
            logger.error(f"Referral Error: {e}")
            pass 

    # 2. рд╕рд╛рдорд╛рдиреНрдп рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ (рдкрд╣рд▓реЗ рдЬреИрд╕рд╛)
    current_credits = get_credits(user_id)
    bot_username = context.bot.username

    keyboard = [
        [
            InlineKeyboardButton("ЁЯФН рдЬрд╛рдирдХрд╛рд░реА рдЦреЛрдЬреЗрдВ", switch_inline_query_current_chat="/search "),
            InlineKeyboardButton(f"ЁЯОБ {REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛рдПрдБ", url=get_referral_link(bot_username, user_id))
        ],
        [
            InlineKeyboardButton(f"ЁЯТ░ рдореЗрд░реЗ рдХреНрд░реЗрдбрд┐рдЯреНрд╕ ({current_credits})", callback_data='show_credits')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_message = (
        f"ЁЯдЦ **рдирдорд╕реНрддреЗ {username}! рдореИрдВ рдЖрдкрдХрд╛ рдЙрдиреНрдирдд рдирдВрдмрд░ рд╕рд░реНрдЪ рдмреЙрдЯ рд╣реВрдБред**\n\n"
        f"рдЖрдЬ рдЖрдкрдХреЛ **{DAILY_CREDITS_LIMIT}** рдореБрдлрд╝реНрдд рд╕рд░реНрдЪ рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдорд┐рд▓реЗ рд╣реИрдВред\n"
        f"рдЖрдк рдЕрднреА **{current_credits}** рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред\n\n"
        "тЬи **рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ:**\n"
        "1. `/search <рдирдВрдмрд░>` рдЯрд╛рдЗрдк рдХрд░реЗрдВред\n"
        "2. рд╣рд░ рд╕рд░реНрдЪ рдореЗрдВ 1 рдХреНрд░реЗрдбрд┐рдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рд╣реЛрддрд╛ рд╣реИред\n"
        f"3. рдЬрдм рдХреНрд░реЗрдбрд┐рдЯ рдЦрддреНрдо рд╣реЛ рдЬрд╛рдПрдБ, рддреЛ **'рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛рдПрдБ'** рдмрдЯрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдХрд┐рд╕реА рджреЛрд╕реНрдд рдХреЛ рд░реЗрдлрд░ рдХрд░реЗрдВ рдФрд░ **{REFERRAL_CREDITS}** рдЕрддрд┐рд░рд┐рдХреНрдд рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдкрд╛рдПрдБ!"
    )

    await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/search <number> рдХрдорд╛рдВрдб рдХреЛ рд╣реИрдВрдбрд▓ рдХрд░рддрд╛ рд╣реИ (рдкрд╣рд▓реЗ рдЬреИрд╕рд╛, рдХреНрд░реЗрдбрд┐рдЯ рдЪреЗрдХ рд╕рд╣рд┐рдд)"""
    user_id = update.effective_user.id
    save_user(user_id) # рдпреВрдЬрд░ рдХреЛ рд╕реЗрд╡ рдХрд░реЗрдВ

    current_credits = get_credits(user_id)
    if current_credits <= 0:
        bot_username = context.bot.username
        keyboard = [[InlineKeyboardButton(f"ЁЯОБ {REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛рдПрдБ", url=get_referral_link(bot_username, user_id))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "ЁЯЫС **рдХреНрд░реЗрдбрд┐рдЯ рдЦрддреНрдо!** рдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрднреА 0 рдХреНрд░реЗрдбрд┐рдЯ рд╣реИрдВред рдФрд░ рд╕рд░реНрдЪ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рджреЛрд╕реНрдд рдХреЛ рд░реЗрдлрд░ рдХрд░реЗрдВ!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return

    if not context.args:
        await update.message.reply_text("тЪая╕П рдХреГрдкрдпрд╛ `/search` рдХреЗ рдмрд╛рдж рдПрдХ рдирдВрдмрд░ рджреЗрдВред рдЙрджрд╛рд╣рд░рдг: `/search 9798423774`")
        return

    num = context.args[0]
    api_url = f"{API_BASE_URL}?num={{{num}}}"
    
    await update.message.reply_text(f"ЁЯФН `{num}` рдХреЗ рд▓рд┐рдП рдЬрд╛рдирдХрд╛рд░реА рдЦреЛрдЬ рд░рд╣рд╛ рд╣реВрдБ... (1 рдХреНрд░реЗрдбрд┐рдЯ рд▓рдЧреЗрдЧрд╛)", parse_mode='Markdown')

    try:
        # API рдХреЙрд▓
        response = requests.get(api_url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        # рдХреНрд░реЗрдбрд┐рдЯ рдШрдЯрд╛рдПрдБ
        USER_CREDITS[user_id] -= 1
        
        # рдбреЗрдЯрд╛ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░реЗрдВ (JSON parsing рдФрд░ formatting)
        if 'result' in data and isinstance(data['result'], list) and len(data['result']) > 0:
            user_data = data['result'][0]
            if 'Api_owner' in user_data:
                del user_data['Api_owner']
                
            response_message = "тЬЕ **рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рд╣реБрдИ:**\n\n"
            for key, value in user_data.items():
                clean_key = key.replace('_', ' ').title()
                response_message += f"**{clean_key}:** `{value}`\n"
            
            remaining_credits = USER_CREDITS[user_id]
            response_message += f"\nЁЯТ░ **рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдмрд╛рдХреА:** {remaining_credits}"
            
            await update.message.reply_text(response_message, parse_mode='Markdown')

        else:
            remaining_credits = USER_CREDITS[user_id]
            await update.message.reply_text(f"тЭМ рдЗрд╕ рдирдВрдмрд░ (`{num}`) рдХреЗ рд▓рд┐рдП рдХреЛрдИ рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рдорд┐рд▓реАред\n"
                                            f"ЁЯТ░ **рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдмрд╛рдХреА:** {remaining_credits}", parse_mode='Markdown')

    except requests.exceptions.RequestException as e:
        USER_CREDITS[user_id] += 1 # рдХреНрд░реЗрдбрд┐рдЯ рд╡рд╛рдкрд╕ рдХрд░реЗрдВ
        logger.error(f"API Request Error: {e}")
        await update.message.reply_text("ЁЯЫС рдмрд╛рд╣рд░реА рд╕рд░реНрд╡рд┐рд╕ рд╕реЗ рдХрдиреЗрдХреНрдЯ рдХрд░рдиреЗ рдореЗрдВ рдХреЛрдИ рд╕рдорд╕реНрдпрд╛ рдЖрдИред рдЖрдкрдХрд╛ рдХреНрд░реЗрдбрд┐рдЯ рд╡рд╛рдкрд╕ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
        
    except Exception as e:
        logger.error(f"Unexpected Error: {e}")
        await update.message.reply_text("тЭМ рдХреЛрдИ рдЕрдирдкреЗрдХреНрд╖рд┐рдд рдЧрд▓рддреА рд╣реБрдИред")

# --- рдирдпрд╛ рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдХрдорд╛рдВрдб ---
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """рдПрдбрдорд┐рди рджреНрд╡рд╛рд░рд╛ рдЪрд▓рд╛рдП рдЬрд╛рдиреЗ рдкрд░ рд╕рднреА рдпреВрдЬрд░реНрд╕ рдХреЛ рдореИрд╕реЗрдЬ рднреЗрдЬрддрд╛ рд╣реИред"""
    user_id = update.effective_user.id
    
    # 1. рдПрдбрдорд┐рди рдЪреЗрдХ
    if user_id != ADMIN_ID:
        await update.message.reply_text("тЪая╕П **рдЕрд╕реНрд╡реАрдХреГрдд!** рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рд╣реИред")
        return

    # 2. рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдореИрд╕реЗрдЬ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
    if not context.args:
        await update.message.reply_text("ЁЯУг рдХреГрдкрдпрд╛ рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдореИрд╕реЗрдЬ рд▓рд┐рдЦреЗрдВред\nрдЙрджрд╛рд╣рд░рдг: `/broadcast Bot рдореЗрдВ рдирдпрд╛ рдлреАрдЪрд░ рдЖ рдЧрдпрд╛ рд╣реИ!`")
        return

    broadcast_message = " ".join(context.args)
    success_count = 0
    failure_count = 0
    
    await update.message.reply_text(f"тП│ **рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ**... {len(USERS)} рдпреВрдЬрд░реНрд╕ рдХреЛ рдореИрд╕реЗрдЬ рднреЗрдЬрд╛ рдЬрд╛рдПрдЧрд╛ред")

    # 3. рд╕рднреА рдпреВрдЬрд░реНрд╕ рдХреЛ рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ
    for chat_id in USERS:
        try:
            # рдпрд╣рд╛рдБ рд╣рдо try-except рдмреНрд▓реЙрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реИрдВ рдХреНрдпреЛрдВрдХрд┐ рдХреБрдЫ рдпреВрдЬрд░реНрд╕ рдиреЗ рдмреЙрдЯ рдХреЛ рдмреНрд▓реЙрдХ рдХрд░ рджрд┐рдпрд╛ рд╣реЛрдЧрд╛
            await context.bot.send_message(chat_id=chat_id, text=broadcast_message, parse_mode='Markdown')
            success_count += 1
        except Exception as e:
            # рдЕрдЧрд░ рдпреВрдЬрд░ рдиреЗ рдмреЙрдЯ рдХреЛ рдмреНрд▓реЙрдХ рдХрд░ рджрд┐рдпрд╛ рд╣реИ (Block by user), рддреЛ рдЙрд╕реЗ рдиреЛрдЯ рдХрд░реЗрдВ
            if 'bot was blocked by the user' in str(e):
                 logger.info(f"User {chat_id} blocked the bot.")
                 # рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ рдпрд╣рд╛рдБ рд╕реЗ рдпреВрдЬрд░ рдХреЛ USERS рд╕реЗрдЯ рд╕реЗ рд╣рдЯрд╛ рд╕рдХрддреЗ рд╣реИрдВ
            else:
                logger.error(f"Could not send message to {chat_id}: {e}")
            failure_count += 1
            
    # 4. рдПрдбрдорд┐рди рдХреЛ рдкрд░рд┐рдгрд╛рдо рднреЗрдЬреЗрдВ
    await update.message.reply_text(
        f"тЬЕ **рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдкреВрд░рд╛ рд╣реБрдЖ!**\n"
        f"рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬреЗ рдЧрдП: **{success_count}**\n"
        f"рд╡рд┐рдлрд▓ (Failed): **{failure_count}**"
    )
# -----------------------------

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Inline рдмрдЯрди рдХреНрд▓рд┐рдХ рдХреЛ рд╣реИрдВрдбрд▓ рдХрд░рддрд╛ рд╣реИ (рдкрд╣рд▓реЗ рдЬреИрд╕рд╛)ред"""
    query = update.callback_query
    await query.answer()

    if query.data == 'show_credits':
        user_id = query.from_user.id
        save_user(user_id) # рдпреВрдЬрд░ рдХреЛ рд╕реЗрд╡ рдХрд░реЗрдВ
        current_credits = get_credits(user_id)
        
        bot_username = context.bot.username
        keyboard = [
            [InlineKeyboardButton(f"ЁЯОБ {REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛рдПрдБ", url=get_referral_link(bot_username, user_id))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"ЁЯТ░ рдЖрдкрдХреЗ рдкрд╛рд╕ **{current_credits}** рд╕рд░реНрдЪ рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдмрд╛рдХреА рд╣реИрдВред", 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )

def main() -> None:
    """Bot рдХреЛ рд╢реБрд░реВ рдХрд░рдиреЗ рдХрд╛ рдореБрдЦреНрдп рдлрд╝рдВрдХреНрд╢рдиред"""
    if not BOT_TOKEN or not ADMIN_ID:
        print("ERROR: BOT_TOKEN or ADMIN_ID is not set in environment variables.")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    # рдХрдорд╛рдВрдб рд╣реИрдВрдбрд▓рд░реНрд╕ рдЬреЛрдбрд╝реЗрдВ
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("search", search_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command)) # рдирдпрд╛ рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдХрдорд╛рдВрдб

    # рдмрдЯрди рд╣реИрдВрдбрд▓рд░
    from telegram.ext import CallbackQueryHandler
    application.add_handler(CallbackQueryHandler(button_handler))

    print(f"Advanced Bot is running. Admin ID: {ADMIN_ID}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
