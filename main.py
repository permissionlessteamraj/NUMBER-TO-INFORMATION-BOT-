import os
import requests
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatMember
from telegram.ext import Application, CommandHandler, ContextTypes, filters
from dotenv import load_dotenv

# Logging рд╕реЗрдЯрдЕрдк рдХрд░реЗрдВ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# .env рдлрд╝рд╛рдЗрд▓ рд▓реЛрдб рдХрд░реЗрдВ
load_dotenv()

# --- CONFIGURATION ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL", "https://freeapi.frappeash.workers.dev/")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
DAILY_CREDITS_LIMIT = 3
REFERRAL_CREDITS = 3
SUPPORT_CHANNEL_LINK = "https://t.me/narzoxbot" 
# ---------------------

# рдбреЗрдЯрд╛рдмреЗрд╕: рдмрдбрд╝реЗ рд╕реНрдХреЗрд▓ рдХреЗ рд▓рд┐рдП, рдЗрд╕рдХреА рдЬрдЧрд╣ Redis/PostgreSQL рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ!
USER_CREDITS = {} 
USERS = set() 

# рдПрдХ рд╕реЗрдЯ рдЬреЛ рдЙрди рд░реЗрдлрд░рд▓ IDs рдХреЛ рдЯреНрд░реИрдХ рдХрд░рддрд╛ рд╣реИ рдЬрд┐рдиреНрд╣реЗрдВ рдкрд╣рд▓реЗ рд╣реА рдХреНрд░реЗрдбрд┐рдЯ рдорд┐рд▓ рдЪреБрдХрд╛ рд╣реИред
# рдпрд╣ рдПрдХ рд╣реА рд░реЗрдлрд░рд▓ рдкрд░ рдмрд╛рд░-рдмрд╛рд░ рдХреНрд░реЗрдбрд┐рдЯ рдорд┐рд▓рдиреЗ рд╕реЗ рд░реЛрдХрддрд╛ рд╣реИред (referrer_id, referred_user_id)
REFERRED_TRACKER = set() 

def get_credits(user_id: int) -> int:
    """рдпреВрдЬрд░ рдХреЗ рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░рддрд╛ рд╣реИ, рдЕрдЧрд░ рдкрд╣рд▓реА рдмрд╛рд░ рд╣реИ рддреЛ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рджреЗрддрд╛ рд╣реИред"""
    # рдпрд╣рд╛рдБ рд╣рдо рдбреЗрд▓реА рд░реАрд╕реЗрдЯ рд▓реЙрдЬрд┐рдХ рдХреЛ рд╕рд░рд▓ рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдХреЛ 0 рд╣реЛрдиреЗ рдкрд░ рд░реАрд╕реЗрдЯ рдХрд░ рд░рд╣реЗ рд╣реИрдВред
    if user_id not in USER_CREDITS or USER_CREDITS.get(user_id, 0) <= 0:
        # рдЕрдЧрд░ рдХреНрд░реЗрдбрд┐рдЯ 0 рдпрд╛ рдЙрд╕рд╕реЗ рдХрдо рд╣реИ, рддреЛ рдбреЗрд▓реА рд▓рд┐рдорд┐рдЯ рдкрд░ рд╕реЗрдЯ рдХрд░реЗрдВ (рдпрд╣ рдорд╛рдирдХрд░ рдХрд┐ рдпрд╣ рдирдпрд╛ рджрд┐рди рд╣реИ)
        USER_CREDITS[user_id] = DAILY_CREDITS_LIMIT
    
    return USER_CREDITS.get(user_id, DAILY_CREDITS_LIMIT)

def get_referral_link(bot_username: str, user_id: int) -> str:
    """рдпреВрдЬрд░ рдХреЗ рд▓рд┐рдП рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ рдмрдирд╛рддрд╛ рд╣реИред"""
    return f"https://t.me/{bot_username}?start=ref_{user_id}"

def save_user(user_id: int) -> None:
    """рдпреВрдЬрд░ ID рдХреЛ USERS рд╕реЗрдЯ рдореЗрдВ рдЬреЛрдбрд╝рддрд╛ рд╣реИред"""
    USERS.add(user_id)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start рдХрдорд╛рдВрдб рдкрд░ рдЬрд╡рд╛рдм рджреЗрддрд╛ рд╣реИ, рдПрдбрд╡рд╛рдВрд╕ рд░реЗрдлрд░рд▓ рд╣реИрдВрдбрд▓рд┐рдВрдЧ рд╕рд╣рд┐рддред"""
    user_id = update.effective_user.id
    username = update.effective_user.first_name or "friend"
    bot_username = context.bot.username
    
    save_user(user_id)

    # 1. рдПрдбрд╡рд╛рдВрд╕ рд░реЗрдлрд░рд▓ рд▓реЙрдЬрд┐рдХ рд╣реИрдВрдбрд▓ рдХрд░реЗрдВ
    if context.args and context.args[0].startswith('ref_'):
        try:
            referrer_id = int(context.args[0].split('_')[1])
            referral_key = (referrer_id, user_id)
            
            if referrer_id != user_id and referral_key not in REFERRED_TRACKER:
                # рд░реЗрдлрд░рд░ рдХреЛ рдХреНрд░реЗрдбрд┐рдЯ рджреЗрдВ
                current_credits = USER_CREDITS.get(referrer_id, DAILY_CREDITS_LIMIT)
                USER_CREDITS[referrer_id] = current_credits + REFERRAL_CREDITS
                REFERRED_TRACKER.add(referral_key) # рдЯреНрд░реИрдХ рдХрд░реЗрдВ рдХрд┐ рдХреНрд░реЗрдбрд┐рдЯ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ
                
                # рд░реЗрдлрд░рд░ рдХреЛ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рднреЗрдЬреЗрдВ
                await context.bot.send_message(
                    chat_id=referrer_id,
                    text=f"ЁЯе│ **рдмрдзрд╛рдИ рд╣реЛ!** `{username}` рдиреЗ рдЖрдкрдХреЗ рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ рд╕реЗ рдмреЙрдЯ рд╢реБрд░реВ рдХрд┐рдпрд╛ рд╣реИред\n"
                         f"рдЖрдкрдХреЛ {REFERRAL_CREDITS} рдЕрддрд┐рд░рд┐рдХреНрдд рдХреНрд░реЗрдбрд┐рдЯ рдорд┐рд▓реЗ рд╣реИрдВред рдЖрдкрдХреЗ рдХреБрд▓ рдХреНрд░реЗрдбрд┐рдЯ: {USER_CREDITS[referrer_id]}",
                    parse_mode='Markdown'
                )
                
                await update.message.reply_text(f"рдзрдиреНрдпрд╡рд╛рдж! рдЖрдкрдиреЗ рд░реЗрдлрд░рд▓ рдХреЗ рдЬрд╝рд░рд┐рдП рдмреЙрдЯ рд╢реБрд░реВ рдХрд┐рдпрд╛ рд╣реИред рдЖрдкрдХреЛ {DAILY_CREDITS_LIMIT} рд╢реБрд░реБрдЖрддреА рдХреНрд░реЗрдбрд┐рдЯ рдорд┐рд▓реЗ рд╣реИрдВред")
            elif referral_key in REFERRED_TRACKER:
                 # рдЕрдЧрд░ рдкрд╣рд▓реЗ рд╣реА рдХреНрд░реЗрдбрд┐рдЯ рдорд┐рд▓ рдЪреБрдХрд╛ рд╣реИ
                 await update.message.reply_text("рдЖрдкрдиреЗ рдкрд╣рд▓реЗ рд╣реА рдЗрд╕ рд░реЗрдлрд░рд▓ рдХреЗ рд▓рд┐рдП рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛ рд▓рд┐рдпрд╛ рд╣реИред")

        except Exception as e:
            logger.error(f"Referral Error: {e}")
            pass 

    # 2. рд╕рд╛рдорд╛рдиреНрдп рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ рдФрд░ рдмрдЯрди
    current_credits = get_credits(user_id)

    # Inline Keyboards (рдмрдЯрди)
    keyboard = [
        [
            InlineKeyboardButton("ЁЯФН рдЬрд╛рдирдХрд╛рд░реА рдЦреЛрдЬреЗрдВ", switch_inline_query_current_chat="/search "),
            InlineKeyboardButton(f"ЁЯОБ {REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛рдПрдБ", url=get_referral_link(bot_username, user_id))
        ],
        [
            InlineKeyboardButton("ЁЯТ░ рдореЗрд░реЗ рдХреНрд░реЗрдбрд┐рдЯреНрд╕", callback_data='show_credits'),
            InlineKeyboardButton("ЁЯУв Support Channel", url=SUPPORT_CHANNEL_LINK)
        ],
        [
            # 'Add Me to Group' рдмрдЯрди рдХреЗ рд▓рд┐рдП URL рдлреЙрд░реНрдореЗрдЯ
            InlineKeyboardButton("тЮХ Add Me to Group", url=f"https://t.me/{bot_username}?startgroup=start")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_message = (
        f"ЁЯдЦ **рдирдорд╕реНрддреЗ {username}! рдореИрдВ рдЖрдкрдХрд╛ рдЙрдиреНрдирдд рдирдВрдмрд░ рд╕рд░реНрдЪ рдмреЙрдЯ рд╣реВрдБред**\n\n"
        f"рдЖрдЬ рдЖрдкрдХреЛ **{DAILY_CREDITS_LIMIT}** рдореБрдлрд╝реНрдд рд╕рд░реНрдЪ рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдорд┐рд▓реЗ рд╣реИрдВред\n"
        f"рдЖрдк рдЕрднреА **{current_credits}** рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред\n\n"
        "тЬи **рдХреНрд░реЗрдбрд┐рдЯ рд╕рд┐рд╕реНрдЯрдо:**\n"
        "1. рд╣рд░ рд╕рд░реНрдЪ рдореЗрдВ 1 рдХреНрд░реЗрдбрд┐рдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рд╣реЛрддрд╛ рд╣реИред\n"
        f"2. рдХрд┐рд╕реА рджреЛрд╕реНрдд рдХреЛ рд░реЗрдлрд░ рдХрд░реЗрдВ рдФрд░ **{REFERRAL_CREDITS}** рдЕрддрд┐рд░рд┐рдХреНрдд рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдкрд╛рдПрдБ!\n\n"
        "ЁЯЪА **рд╢реБрд░реБрдЖрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП:** `/search <рдирдВрдмрд░>` рдЯрд╛рдЗрдк рдХрд░реЗрдВред"
    )

    await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/search <number> рдХрдорд╛рдВрдб рдХреЛ рд╣реИрдВрдбрд▓ рдХрд░рддрд╛ рд╣реИ рдФрд░ рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдХреЛ рд╕рдЦреНрддреА рд╕реЗ рд▓рд╛рдЧреВ рдХрд░рддрд╛ рд╣реИред"""
    user_id = update.effective_user.id
    save_user(user_id)

    current_credits = get_credits(user_id)
    bot_username = context.bot.username

    # **рд╕рдЦреНрдд рдХреНрд░реЗрдбрд┐рдЯ рдЪреЗрдХ: 0 рдХреНрд░реЗрдбрд┐рдЯ рд╣реЛрдиреЗ рдкрд░ рд╕рд░реНрдЪ рдирд╣реАрдВ рд╣реЛрдЧрд╛**
    if current_credits <= 0:
        keyboard = [[InlineKeyboardButton(f"ЁЯОБ {REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛рдПрдБ", url=get_referral_link(bot_username, user_id))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "ЁЯЫС **рдХреНрд░реЗрдбрд┐рдЯ рдЦрддреНрдо!**\nрдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрднреА 0 рдХреНрд░реЗрдбрд┐рдЯ рд╣реИрдВред рдФрд░ рд╕рд░реНрдЪ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХрд┐рд╕реА рджреЛрд╕реНрдд рдХреЛ рд░реЗрдлрд░ рдХрд░реЗрдВ!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return # рдХреНрд░реЗрдбрд┐рдЯ рдЦрддреНрдо рд╣реЛрдиреЗ рдкрд░ рдпрд╣рд╛рдБ рд░реБрдХ рдЬрд╛рдПрдБ

    if not context.args:
        await update.message.reply_text("тЪая╕П рдХреГрдкрдпрд╛ `/search` рдХреЗ рдмрд╛рдж рдПрдХ рдирдВрдмрд░ рджреЗрдВред рдЙрджрд╛рд╣рд░рдг: `/search 9777777774`")
        return

    num = context.args[0]
    api_url = f"{API_BASE_URL}?num={{{num}}}"
    
    await update.message.reply_text(f"ЁЯФН `{num}` рдХреЗ рд▓рд┐рдП рдЬрд╛рдирдХрд╛рд░реА рдЦреЛрдЬ рд░рд╣рд╛ рд╣реВрдБ... (1 рдХреНрд░реЗрдбрд┐рдЯ рд▓рдЧреЗрдЧрд╛)", parse_mode='Markdown')

    try:
        # API рдХреЙрд▓
        response = requests.get(api_url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        # рдХреНрд░реЗрдбрд┐рдЯ рдШрдЯрд╛рдПрдБ (рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдХреЙрд▓ рд╣реЛрдиреЗ рдкрд░)
        USER_CREDITS[user_id] -= 1
        
        # рдбреЗрдЯрд╛ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░реЗрдВ (JSON parsing рдФрд░ formatting)
        if 'result' in data and isinstance(data['result'], list) and len(data['result']) > 0:
            user_data = data['result'][0]
            if 'Api_owner' in user_data:
                del user_data['Api_owner']
                
            response_message = "тЬЕ **рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рд╣реБрдИ:**\n\n"
            for key, value in user_data.items():
                clean_key = key.replace('_', ' ').title()
                response_message += f"**{clean_key}:** `{value}`\n"
            
            remaining_credits = USER_CREDITS[user_id]
            response_message += f"\nЁЯТ░ **рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдмрд╛рдХреА:** {remaining_credits}"
            
            await update.message.reply_text(response_message, parse_mode='Markdown')

        else:
            remaining_credits = USER_CREDITS[user_id]
            # рдпрджрд┐ рдбреЗрдЯрд╛ рдирд╣реАрдВ рдорд┐рд▓рд╛, рддреЛ рднреА рдХреНрд░реЗрдбрд┐рдЯ рдЦрд░реНрдЪ рд╣реЛрдЧрд╛ рдХреНрдпреЛрдВрдХрд┐ рд╕рд░реНрдЪ рддреЛ рд╣реБрдЖ рд╣реИред
            await update.message.reply_text(f"тЭМ рдЗрд╕ рдирдВрдмрд░ (`{num}`) рдХреЗ рд▓рд┐рдП рдХреЛрдИ рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рдорд┐рд▓реАред\n"
                                            f"ЁЯТ░ **рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдмрд╛рдХреА:** {remaining_credits}", parse_mode='Markdown')

    except requests.exceptions.RequestException as e:
        # рдЕрдЧрд░ API рдХреЙрд▓ рд╡рд┐рдлрд▓ рд╣реБрдЖ, рддреЛ рдХреНрд░реЗрдбрд┐рдЯ рд╡рд╛рдкрд╕ рдХрд░ рджреЗрдВред
        USER_CREDITS[user_id] += 1 
        logger.error(f"API Request Error: {e}")
        await update.message.reply_text("ЁЯЫС рдмрд╛рд╣рд░реА рд╕рд░реНрд╡рд┐рд╕ рд╕реЗ рдХрдиреЗрдХреНрдЯ рдХрд░рдиреЗ рдореЗрдВ рдХреЛрдИ рд╕рдорд╕реНрдпрд╛ рдЖрдИред рдЖрдкрдХрд╛ рдХреНрд░реЗрдбрд┐рдЯ рд╡рд╛рдкрд╕ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
        
    except Exception as e:
        logger.error(f"Unexpected Error: {e}")
        await update.message.reply_text("тЭМ рдХреЛрдИ рдЕрдирдкреЗрдХреНрд╖рд┐рдд рдЧрд▓рддреА рд╣реБрдИред")

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдХрдорд╛рдВрдб (рдПрдбрдорд┐рди-рдУрдирд▓реА)
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("тЪая╕П **рдЕрд╕реНрд╡реАрдХреГрдд!** рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рд╣реИред")
        return

    if not context.args:
        await update.message.reply_text("ЁЯУг рдХреГрдкрдпрд╛ рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдореИрд╕реЗрдЬ рд▓рд┐рдЦреЗрдВред\nрдЙрджрд╛рд╣рд░рдг: `/broadcast Bot рдореЗрдВ рдирдпрд╛ рдлреАрдЪрд░ рдЖ рдЧрдпрд╛ рд╣реИ!`")
        return

    broadcast_message = " ".join(context.args)
    success_count = 0
    failure_count = 0
    
    await update.message.reply_text(f"тП│ **рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ**... {len(USERS)} рдпреВрдЬрд░реНрд╕ рдХреЛ рдореИрд╕реЗрдЬ рднреЗрдЬрд╛ рдЬрд╛рдПрдЧрд╛ред")

    for chat_id in USERS:
        try:
            await context.bot.send_message(chat_id=chat_id, text=broadcast_message, parse_mode='Markdown')
            success_count += 1
        except Exception as e:
            if 'bot was blocked by the user' in str(e):
                 logger.info(f"User {chat_id} blocked the bot.")
            failure_count += 1
            
    await update.message.reply_text(
        f"тЬЕ **рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдкреВрд░рд╛ рд╣реБрдЖ!**\n"
        f"рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬреЗ рдЧрдП: **{success_count}**\n"
        f"рд╡рд┐рдлрд▓ (Failed): **{failure_count}**"
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # рдмрдЯрди рд╣реИрдВрдбрд▓рд░
    query = update.callback_query
    await query.answer()

    if query.data == 'show_credits':
        user_id = query.from_user.id
        save_user(user_id) 
        current_credits = get_credits(user_id)
        
        bot_username = context.bot.username
        keyboard = [
            [InlineKeyboardButton(f"ЁЯОБ {REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛рдПрдБ", url=get_referral_link(bot_username, user_id))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"ЁЯТ░ рдЖрдкрдХреЗ рдкрд╛рд╕ **{current_credits}** рд╕рд░реНрдЪ рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдмрд╛рдХреА рд╣реИрдВред", 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )

def main() -> None:
    if not BOT_TOKEN or not ADMIN_ID:
        print("ERROR: BOT_TOKEN or ADMIN_ID is not set in environment variables.")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("search", search_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    
    from telegram.ext import CallbackQueryHandler
    application.add_handler(CallbackQueryHandler(button_handler))

    print(f"Final Advanced Bot is running. Admin ID: {ADMIN_ID}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
