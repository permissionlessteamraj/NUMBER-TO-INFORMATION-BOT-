import os
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv

# .env ‡§´‡§º‡§æ‡§á‡§≤ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
load_dotenv()

# --- CONFIGURATION ---
# BotFather ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ Token
BOT_TOKEN = os.getenv("BOT_TOKEN")
# ‡§Ü‡§™‡§ï‡•Ä API ‡§ï‡§æ ‡§¨‡•á‡§∏ URL
API_BASE_URL = os.getenv("API_BASE_URL", "https://freeapi.frappeash.workers.dev/")
# ---------------------

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§™‡§∞ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§"""
    await update.message.reply_text(
        '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§®‡§Ç‡§¨‡§∞ ‡§∏‡•á ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ñ‡•ã‡§ú ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§\n'
        '‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è `/search <‡§®‡§Ç‡§¨‡§∞>` ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§\n'
        '‡§â‡§¶‡§æ‡§π‡§∞‡§£: `/search 9798423774`'
    )

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/search <number> ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ API ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    
    # ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡§æ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü (‡§®‡§Ç‡§¨‡§∞) ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§
    # context.args ‡§Æ‡•á‡§Ç /search ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡•á ‡§∏‡§≠‡•Ä ‡§∂‡§¨‡•ç‡§¶ ‡§è‡§ï ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ `/search` ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§è‡§ï ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡•á‡§Ç‡•§ ‡§â‡§¶‡§æ‡§π‡§∞‡§£: `/search 9798423774`")
        return

    num = context.args[0]
    
    # API URL ‡§¨‡§®‡§æ‡§è‡§Ç, ‡§®‡§Ç‡§¨‡§∞ ‡§ï‡•ã curly braces ({}) ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§≤‡§ó‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç‡•§
    api_url = f"{API_BASE_URL}?num={{{num}}}"
    
    await update.message.reply_text(f"üîç `{num}` ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ñ‡•ã‡§ú ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...", parse_mode='Markdown')

    try:
        # API ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§
        response = requests.get(api_url, timeout=10)
        response.raise_for_status() # HTTP errors ‡§ï‡•á ‡§≤‡§ø‡§è exception ‡§â‡§†‡§æ‡§è‡§Å‡•§

        data = response.json()
        
        # 'result' array ‡§ï‡•á ‡§™‡§π‡§≤‡•á ‡§è‡§≤‡§ø‡§Æ‡•á‡§Ç‡§ü ‡§∏‡•á ‡§°‡•á‡§ü‡§æ ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç‡•§
        if 'result' in data and isinstance(data['result'], list) and len(data['result']) > 0:
            user_data = data['result'][0]
            
            # 'Api_owner' ‡§ú‡•à‡§∏‡•Ä ‡§Ö‡§®‡§æ‡§µ‡§∂‡•ç‡§Ø‡§ï keys ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç‡•§
            if 'Api_owner' in user_data:
                del user_data['Api_owner']
                
            # ‡§∏‡§æ‡§´‡§º ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§´‡§º‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§
            response_message = "‚úÖ **‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•Å‡§à:**\n\n"
            
            # ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§´‡§º‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡•Ç‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§
            for key, value in user_data.items():
                # Underscore ‡§ï‡•ã ‡§π‡§ü‡§æ‡§ï‡§∞ (‡§ú‡•à‡§∏‡•á father_name ‡§∏‡•á Father Name)
                clean_key = key.replace('_', ' ').title()
                response_message += f"**{clean_key}:** `{value}`\n"
            
            await update.message.reply_text(response_message, parse_mode='Markdown')

        else:
            await update.message.reply_text(f"‚ùå ‡§á‡§∏ ‡§®‡§Ç‡§¨‡§∞ (`{num}`) ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§", parse_mode='Markdown')

    except requests.exceptions.RequestException as e:
        # API ‡§ï‡•â‡§≤ ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ errors ‡§ï‡•ã ‡§∏‡§Ç‡§≠‡§æ‡§≤‡•á‡§Ç‡•§
        print(f"API Request Error: {e}")
        await update.message.reply_text("üõë ‡§¨‡§æ‡§π‡§∞‡•Ä ‡§∏‡§∞‡•ç‡§µ‡§ø‡§∏ ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§")
        
    except Exception as e:
        # ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡§≠‡•Ä errors ‡§ï‡•ã ‡§∏‡§Ç‡§≠‡§æ‡§≤‡•á‡§Ç‡•§
        print(f"Unexpected Error: {e}")
        await update.message.reply_text("‚ùå ‡§ï‡•ã‡§à ‡§Ö‡§®‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ó‡§≤‡§§‡•Ä ‡§π‡•Å‡§à‡•§")


def main() -> None:
    """Bot ‡§ï‡•ã ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®‡•§"""
    if not BOT_TOKEN:
        print("ERROR: BOT_TOKEN is not set in environment variables.")
        return

    # Application Builder ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á Bot ‡§ï‡•ã ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§
    application = Application.builder().token(BOT_TOKEN).build()

    # ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("search", search_command))

    # Bot ‡§ï‡•ã ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§ö‡§≤‡§®‡•á ‡§¶‡•á‡§Ç (polling)‡•§
    print("Bot is running...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
